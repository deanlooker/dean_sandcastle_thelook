view: potential_pentester_groups {
  derived_table: {
    sql: /*with pentester_profiles_tags as (
      SELECT user_id,
      tag,
      case when compliance_frameworks is not null then 'compliance framework' else null end as tag_category
      FROM pentester_profiles,
      UNNEST(compliance_frameworks) tag

      union all
      SELECT user_id,
      tag,
      case when tools is not null then 'tools' else null end as tag_category

      FROM pentester_profiles,
      UNNEST(tools) tag

      union all
      SELECT user_id,
      tag,
      case when preferred_times is not null then 'preferred times' else null end as tag_category

      FROM pentester_profiles,
      UNNEST(preferred_times) tag

      union all
      SELECT user_id,
      tag ,
      case when weekdays is not null then 'weekdays' else null end as tag_category

      FROM pentester_profiles,
      UNNEST(weekdays) tag

      union all
      SELECT user_id,
      tag,
      case when work_schedule is not null then 'work schedule' else null end as tag_category

      FROM pentester_profiles,
      UNNEST(work_schedule) tag

      union all
      SELECT user_id,
      years_experience as tag,
      case when years_experience is not null then 'years experience' else null end as tag_category

      FROM pentester_profiles
      union all
      select
      user_id,
      certifications.short_name as tag,
      case when certifications.short_name is not null then 'certifications' else null end as tag_category

      --certifications.name
      from pentester_profiles
      left join certifications_pentester_profiles cpp on cpp.pentester_profile_id = pentester_profiles.id
      left join certifications on certifications.id = cpp.certification_id

      union all
      select
      user_id,
      skills.name as tag,
      case when skills.name is not null then 'skills' else null end as tag_category
      from pentester_profiles pp
      left join pentester_profile_skills pps on pps.pentester_profile_id = pp.id
      left join skills on skills.id = pps.skill_id

      group by 1,2,3)
      */
      /*, pentester_and_team_applicants as (
      select

      users.username,
      users.id user_id,
      profiles.h1_pentester_lead,
      users.tax_form_country,
      pentester_profiles_tags_web.tag


      from pentests p
      left join pentesters pp on pp.pentest_id = p.id and pp.applied_at is not null
      left join teams on teams.id = p.team_id
      left join users on users.id = pp.user_id
      --left join pentester_profiles_preferred_teammates pppt on pppt.user_id = users.id
      left join pentester_profiles profiles on profiles.user_id = users.id
      left join pentester_profiles_tags as pentester_profiles_tags_web on pentester_profiles_tags_web.user_id = users.id and pentester_profiles_tags_web.tag_category = 'skills' and pentester_profiles_tags_web.tag = 'Web Applications'
      where teams.handle = 'aclaimant_h1p')

      */
      /*,
      max_accepted_pentester as (
      select user_id, max(accepted_at) as accepted_at
      from (
      select
      username,
      user_id,
      pentests.id as pentest_id,
      handle,
      accepted_at::date,
      applied_at::date,
      lag(accepted_at::date) over (partition by user_id order by accepted_at asc) as lag_accepted_at,
      lag(applied_at::date) over (partition by user_id order by applied_at asc) as lag_applied_at

      FROM public.pentests AS pentests
      LEFT JOIN public.pentesters AS pentesters ON (pentests."id") = (pentesters."pentest_id")
      LEFT JOIN teams ON (pentests."team_id") = teams.id
      left join users on users.id = pentesters.user_id
      group by 1,2,3,4, accepted_at, user_id,applied_at) subq
      group by 1

      )
      ,
      */ with cteAllColumns as (
      select user_id as col, h1_pentester_lead, tax_form_country, username
      from ${pentester_and_team_applicants.SQL_TABLE_NAME} p
      where p.handle = {% parameter handle %}

      union
      select user_id as col, h1_pentester_lead, tax_form_country, username
      from ${pentester_and_team_applicants.SQL_TABLE_NAME} p
      where p.handle = {% parameter handle %}

      union
      select user_id as col, h1_pentester_lead, tax_form_country, username
      from ${pentester_and_team_applicants.SQL_TABLE_NAME} p
      where p.handle = {% parameter handle %} )
      , choices as (
      select
      c1.col as pentester1,
      c2.col as pentester2,
      c3.col pentester3,
      case when c1.h1_pentester_lead is true then 1 else 0 end as pentester1_is_h1_lead,
      case when c2.h1_pentester_lead is true then 1 else 0 end as pentester2_is_h1_lead,
      case when c3.h1_pentester_lead is true then 1 else 0 end as pentester3_is_h1_lead,
      c1.tax_form_country as pentester1_tax_form_country,
      c2.tax_form_country as pentester2_tax_form_country,
      c3.tax_form_country as pentester3_tax_form_country,
      c1.username as pentester1_username,
      c2.username as pentester2_username,
      c3.username as pentester3_username
      from cteAllColumns c1
      cross join cteAllColumns c2
      cross join cteAllColumns c3

      where c1.col < c2.col
      and c2.col < c3.col
      and handle = {% parameter handle %}
      order by c1.col, c2.col, c3.col)

      select pentester1,
      pentester2,
      pentester3
      /*,
      max_accepted_pentester.accepted_at as p1_max_accepted,
      max_accepted_pentester2.accepted_at as p2_max_accepted,
      max_accepted_pentester3.accepted_at as p3_max_accepted,
      date_part('days',(now() - max_accepted_pentester.accepted_at)) days_since_max_accepted_1,
      date_part('days',(now() - max_accepted_pentester.accepted_at)) days_since_max_accepted_2,
      date_part('days',(now() - max_accepted_pentester3.accepted_at)) days_since_max_accepted_3,
      date_part('days',(now() - max_accepted_pentester.accepted_at)) + date_part('days',(now() - max_accepted_pentester2.accepted_at)) + date_part('days',(now() - max_accepted_pentester3.accepted_at)) days_since_accepted_all,

      case when pentester_profiles_tags_web1.tag is not null then 1 else 0 end as skills_tag_web1,
      case when pentester_profiles_tags_web2.tag is not null then 1 else 0 end as skills_tag_web2,
      case when pentester_profiles_tags_web3.tag is not null then 1 else 0 end as skills_tag_web3,
      (case when pentester_profiles_tags_web1.tag is not null then 1 else 0 end) + case when pentester_profiles_tags_web2.tag is not null then 1 else 0 end + case when pentester_profiles_tags_web3.tag is not null then 1 else 0 end as web_sum,
      case when pentester_profiles_tags_ios1.tag is not null then 1 else 0 end as skills_tag_ios1,
      case when pentester_profiles_tags_ios2.tag is not null then 1 else 0 end as skills_tag_ios2,
      case when pentester_profiles_tags_ios3.tag is not null then 1 else 0 end as skills_tag_ios3,
      (case when pentester_profiles_tags_ios1.tag is not null then 1 else 0 end) + case when pentester_profiles_tags_ios2.tag is not null then 1 else 0 end + case when pentester_profiles_tags_ios3.tag is not null then 1 else 0 end as ios_sum,
      pentester1_is_h1_lead + pentester2_is_h1_lead + pentester3_is_h1_lead as count_h1_leads_in_match,
      (case when trim(pentester1_tax_form_country) = trim(pentester2_tax_form_country) then 1 else 0 end) + (case when trim(pentester1_tax_form_country) = trim(pentester3_tax_form_country) then 1 else 0 end) + (case when trim(pentester2_tax_form_country) = trim(pentester3_tax_form_country) then 1 else 0 end) as count_country_matches,
      concat(pentester1_tax_form_country,',', pentester2_tax_form_country, ',',pentester3_tax_form_country) all_countries,
      concat(pentester1_username,',', pentester2_username, ',',pentester3_username) all_usernames

      */
      --same country
      --preferred teammates matches
      from choices
      /*left join max_accepted_pentester on max_accepted_pentester.user_id = choices.pentester1
      left join max_accepted_pentester max_accepted_pentester2 on max_accepted_pentester2.user_id = choices.pentester2
      left join max_accepted_pentester max_accepted_pentester3 on max_accepted_pentester3.user_id = choices.pentester3
      left join pentester_profiles_tags as pentester_profiles_tags_web1 on pentester_profiles_tags_web1.user_id = choices.pentester1 and pentester_profiles_tags_web1.tag_category = 'skills' and pentester_profiles_tags_web1.tag = 'Web Applications'
      left join pentester_profiles_tags as pentester_profiles_tags_web2 on pentester_profiles_tags_web2.user_id = choices.pentester2 and pentester_profiles_tags_web2.tag_category = 'skills' and pentester_profiles_tags_web2.tag = 'Web Applications'
      left join pentester_profiles_tags as pentester_profiles_tags_web3 on pentester_profiles_tags_web3.user_id = choices.pentester3 and pentester_profiles_tags_web3.tag_category = 'skills' and pentester_profiles_tags_web3.tag = 'Web Applications'
      left join pentester_profiles_tags as pentester_profiles_tags_ios1 on pentester_profiles_tags_ios1.user_id = choices.pentester1 and pentester_profiles_tags_ios1.tag_category = 'skills' and pentester_profiles_tags_ios1.tag = 'iOS'
      left join pentester_profiles_tags as pentester_profiles_tags_ios2 on pentester_profiles_tags_ios2.user_id = choices.pentester2 and pentester_profiles_tags_ios2.tag_category = 'skills' and pentester_profiles_tags_ios2.tag = 'iOS'
      left join pentester_profiles_tags as pentester_profiles_tags_ios3 on pentester_profiles_tags_ios3.user_id = choices.pentester3 and pentester_profiles_tags_ios3.tag_category = 'skills' and pentester_profiles_tags_ios3.tag = 'iOS'

      */
      where handle = {% parameter handle %};;
  }

  parameter: handle {
    type: string
  }

  measure: count {
    type: count
    drill_fields: [detail*]
  }

  dimension: pentester1 {
    type: number
    sql: ${TABLE}."pentester1" ;;
  }

  dimension: pentester2 {
    type: number
    sql: ${TABLE}."pentester2" ;;
  }

  dimension: pentester3 {
    type: number
    sql: ${TABLE}."pentester3" ;;
  }

# dimension: p1_max_accepted {
# type: date
# sql: ${TABLE}."p1_max_accepted" ;;
# }
#
# dimension: p2_max_accepted {
# type: date
# sql: ${TABLE}."p2_max_accepted" ;;
# }
#
# dimension: p3_max_accepted {
# type: date
# sql: ${TABLE}."p3_max_accepted" ;;
# }
#
# dimension: days_since_max_accepted_1 {
# type: number
# sql: ${TABLE}."days_since_max_accepted_1" ;;
# }
#
# dimension: days_since_max_accepted_2 {
# type: number
# sql: ${TABLE}."days_since_max_accepted_2" ;;
# }
#
# dimension: days_since_max_accepted_3 {
# type: number
# sql: ${TABLE}."days_since_max_accepted_3" ;;
# }
#
# dimension: days_since_accepted_all {
# type: number
# sql: ${TABLE}."days_since_accepted_all" ;;
# }
#
# dimension: skills_tag_web1 {
# type: number
# sql: ${TABLE}."skills_tag_web1" ;;
# }
#
# dimension: skills_tag_web2 {
# type: number
# sql: ${TABLE}."skills_tag_web2" ;;
# }
#
# dimension: skills_tag_web3 {
# type: number
# sql: ${TABLE}."skills_tag_web3" ;;
# }
#
# dimension: web_sum {
# type: number
# sql: ${TABLE}."web_sum" ;;
# }
#
# dimension: skills_tag_ios1 {
# type: number
# sql: ${TABLE}."skills_tag_ios1" ;;
# }
#
# dimension: skills_tag_ios2 {
# type: number
# sql: ${TABLE}."skills_tag_ios2" ;;
# }
#
# dimension: skills_tag_ios3 {
# type: number
# sql: ${TABLE}."skills_tag_ios3" ;;
# }
#
# dimension: ios_sum {
# type: number
# sql: ${TABLE}."ios_sum" ;;
# }
#
# dimension: count_h1_leads_in_match {
# type: number
# sql: ${TABLE}."count_h1_leads_in_match" ;;
# }
#
# dimension: count_country_matches {
# type: number
# sql: ${TABLE}."count_country_matches" ;;
# }
#
# dimension: all_countries {
# type: string
# sql: ${TABLE}."all_countries" ;;
# }
#
# dimension: all_usernames {
# type: string
# sql: ${TABLE}."all_usernames" ;;
# }
#
  set: detail {
    fields: [
      pentester1,
      pentester2,
      pentester3
    ]
# p1_max_accepted,
# p2_max_accepted,
# p3_max_accepted,
# days_since_max_accepted_1,
# days_since_max_accepted_2,
# days_since_max_accepted_3,
# days_since_accepted_all,
# skills_tag_web1,
# skills_tag_web2,
# skills_tag_web3,
# web_sum,
# skills_tag_ios1,
# skills_tag_ios2,
# skills_tag_ios3,
# ios_sum,
# count_h1_leads_in_match,
# count_country_matches,
# all_countries,
# all_usernames

  }
}
